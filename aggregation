https://pgexercises.com/questions/aggregates/

--Count the number of facilities

SELECT COUNT(facid) FROM facilities;


--Count the number of expensive facilities

SELECT COUNT(*) FROM facilities
WHERE guestcost >= 10;


--Count the number of recommendations each member makes.

SELECT recommendedby, COUNT(recommendedby) FROM members
WHERE recommendedby IS NOT NULL
GROUP BY recommendedby
ORDER BY recommendedby;


--List the total slots booked per facility

SELECT facid, SUM(slots) AS "Total Slots" FROM bookings
GROUP BY facid
ORDER BY facid;


--List the total slots booked per facility in a given month

SELECT facid, SUM(slots) AS "Total Slots" FROM bookings
WHERE starttime >= '2012-09-01'
AND starttime < '2012-10-01'
GROUP BY facid
ORDER BY "Total Slots";


--List the total slots booked per facility per month

SELECT facid, EXTRACT(month from starttime) AS "month", SUM(slots) AS "Total Slots" FROM bookings
WHERE starttime >= '2012-01-01' AND starttime < '2013-01-01'
GROUP BY facid, month
ORDER BY facid, month;


--Find the count of members who have made at least one booking

SELECT COUNT(DISTINCT memid) FROM bookings;


--List facilities with more than 1000 slots booked

SELECT facid, SUM(slots) AS "Total Slots" FROM bookings
GROUP BY facid
HAVING SUM(slots) > 1000
ORDER BY facid;


--Find the total revenue of each facility

SELECT f.name, SUM(slots*CASE
  WHEN b.memid = 0 THEN f.guestcost
  ELSE f.membercost
  END) AS revenue
FROM bookings b
JOIN facilities f ON b.facid = f.facid
GROUP BY f.name
ORDER BY revenue;


--Find facilities with a total revenue less than 1000

SELECT name, revenue
FROM (SELECT f.name, SUM(CASE
      WHEN b.memid = 0 THEN b.slots * f.guestcost
      ELSE b.slots * f.membercost
      END) AS revenue
FROM bookings b
JOIN facilities f ON b.facid = f.facid
GROUP BY f.name) AS subq
WHERE revenue < 1000
ORDER BY revenue;


--Output the facility id that has the highest number of slots booked

SELECT facid, sum(slots) AS "Total Slots"
FROM bookings
GROUP BY facid
HAVING sum(slots) = 
(SELECT MAX(sum.ts2) FROM
	(SELECT SUM(slots) AS ts2
	 FROM bookings
	 GROUP BY facid) AS sum);
   
/*simplified with a Common Table Expression (CTE)*/

WITH sum AS (SELECT facid, sum(slots) AS ts
	FROM bookings
	GROUP BY facid)
SELECT facid, ts
FROM sum
WHERE ts = (SELECT max(ts) FROM sum);


--List the total slots booked per facility per month, part 2

SELECT facid, EXTRACT (month FROM starttime) AS month, SUM(slots) AS slots FROM bookings
WHERE starttime >= '2012-01-01' AND starttime < '2013-01-01'
GROUP BY ROLLUP(facid, month)
ORDER BY facid, month;


--List the total hours booked per named facility

SELECT b.facid, f.name, TRIM(TO_CHAR(SUM(b.slots*.5), '9999D00')) AS "Total Hours"
FROM bookings b
JOIN facilities f ON b.facid=f.facid
GROUP BY b.facid, f.name
ORDER BY b.facid;


--List each member's first booking after September 1st 2012

SELECT m.surname, m.firstname, m.memid, MIN(b.starttime) AS starttime
FROM members m
JOIN bookings b ON m.memid=b.memid
WHERE starttime > '2012-09-01'
GROUP BY m.surname, m.firstname, m.memid
ORDER BY m.memid


--Produce a list of member names, with each row containing the total member count

SELECT count(*) over(), firstname, surname
FROM members
ORDER BY joindate


--Produce a numbered list of members

